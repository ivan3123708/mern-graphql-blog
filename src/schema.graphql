# import PostOrderByInput from '../prisma/generated/prisma-client/prisma.graphql';

type Query {
  user: User
  users: [User!]!
  post(id: ID!): Post
  posts(first: Int, skip: Int, orderBy: PostOrderByInput): [Post!]!
  comments: [Comment!]!
}

type Mutation {
  login(data: LoginUserInput!): AuthPayload!
  createUser(data: CreateUserInput!): AuthPayload!
  updateUser(data: UpdateUserInput!): User!
  deleteUser(id: ID!): User!
  createPost(data: CreatePostInput!): Post!
  updatePost(id: ID!, data: UpdatePostInput!): Post!
  likePost(id: ID!): Post!
  deletePost(id: ID!): Post!
  createComment(data: CreateCommentInput!): Comment!
  updateComment(id: ID!, data: UpdateCommentInput!): Comment!
  deleteComment(id: ID!): Comment!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  following: [User!]!
  likedPosts: [Post!]!
  createdAt: String!
}

type Post {
  id: ID!
  title: String!
  text: String!
  category: String!
  author: User!
  comments: [Comment!]!
  likedBy: [User!]!
  likes: Int!
  createdAt: String!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  createdAt: String!
}

input LoginUserInput {
  email: String!
  password: String!
}

type AuthPayload {
  user: User!
  token: String!
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  name: String
  email: String
  password: String
}

input CreatePostInput {
  title: String!
  text: String!
  category: String!
}

input UpdatePostInput {
  title: String
  text: String
  category: String
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String!
}